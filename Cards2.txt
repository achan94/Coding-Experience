#include <iostream>
#include <string>
#include <ctime>
#include <list>
using namespace std;

class Card
{
public:
   enum Suit { clubs, diamonds, hearts, spades };
   static char DEFAULT_VAL;
   static Suit DEFAULT_SUIT;

private:
   char value;
   Suit suit;
   bool errorFlag;

public:
   Card(char value = DEFAULT_VAL, Suit suit = DEFAULT_SUIT);
   string toString();
   bool set(char value = DEFAULT_VAL, Suit suit = DEFAULT_SUIT);

   char getVal() { return value; }
   Suit getSuit() { return suit; }
   bool getErrorFlag() { return errorFlag; }
   bool equals(Card card);

private:
   bool isValid(char value, Suit suit);

protected:  
   static char valueRanks[13];
   static Card::Suit suitRanks[4];
public:
   int compareTo(Card &other);
   static int getSuitRank(Suit st);
   static int getValueRank(char val);
};

char Card::DEFAULT_VAL = 'A';
Card::Suit Card::DEFAULT_SUIT = Card::spades;

// for random card generation
Card generateRandomCard();

// Card Global initializations
// for comparisons -- ordering values and ranks
char Card::valueRanks[] = { '2', '3', '4', '5', '6', '7', '8', '9', 'T',
   'J', 'Q', 'K', 'A'};
Card::Suit Card::suitRanks[4] = {Card::clubs, Card::diamonds, Card::hearts, 
   Card::spades};

bool operator== (Card firstCard, Card otherCard);

typedef list<Card> CardList;
void showList (CardList &myList);
void insert (CardList &myList, Card &insertedCard);
bool remove (CardList &myList, Card &removedCard);
bool removeAll (CardList &myList, Card &x);

int main()
{
   //main to test comparison mechanism and random card generation
   int k;

   srand(time(NULL));  // or not, if you want repetition

   cout << "Comparison Mechanism and Random Card Generation Test" << endl;
   cout << "should all be 0:\n";                // alignment for readability:
   cout << Card('A', Card::spades).compareTo(   Card('A', Card::spades) ) 
      << endl;
   cout << Card('4', Card::hearts).compareTo(   Card('4' ,Card::hearts) ) 
      << endl;
   cout << Card('T', Card::clubs).compareTo(    Card('T', Card::clubs) ) 
      << endl;

   cout << "should all be < 0 :\n";
   cout << Card('A', Card::clubs).compareTo(    Card('A', Card::spades) ) 
      << endl;
   cout << Card('4', Card::hearts).compareTo(   Card('5', Card::hearts) ) 
      << endl;
   cout << Card('9', Card::hearts).compareTo(   Card('T', Card::clubs) ) 
      << endl;

   cout << "should all be > 0 :\n";
   cout << Card('A', Card::clubs).compareTo(    Card('K', Card::clubs) ) 
      << endl;
   cout << Card('6', Card::hearts).compareTo(   Card('5', Card::spades) ) 
      << endl;
   cout << Card('K', Card::diamonds).compareTo( Card('K', Card::clubs) ) 
      << endl;

   cout << "\nSome random cards:\n";
   for ( k = 0; k < 50; k++ )
   {
      cout << generateRandomCard().toString() << "  ";
   }
   cout << endl << endl;


   //global methods test
   CardList myList;
   Card saveCard[10];

   for (int k = 0; k <= 9; k++)
   {
      saveCard[k] = generateRandomCard();
      for (int x = 0; x <=1 ; x++)
         insert (myList, saveCard[k]);
   }
   
   cout << "----- Global Method Test -----" << endl;
   showList (myList);

   cout << "Removing " << saveCard[1].toString() << endl;
   while(remove(myList,saveCard[1]))
   {
      // leave empty
   }
   
   cout << "Removing " << saveCard[2].toString() << endl;
   while(remove(myList,saveCard[2]))
   {
      // leave empty
   }

   cout << "Removing " << saveCard[3].toString() << endl;
   while(remove(myList,saveCard[3]))
   {
      // leave empty
   }

   cout << "Removing " << saveCard[5].toString() << endl;
   while (remove(myList,saveCard[5]))
   {
      // leave empty
   }

   showList (myList);

   if (removeAll (myList, saveCard[1]))
      cout << saveCard[1].toString() << " has been removed." << endl << endl;
   else
      cout << saveCard[1].toString() << " is not on the list." << endl << endl;

   cout << "Removing all " << saveCard[0].toString() << endl;
   if (removeAll (myList, saveCard[0]))
      cout << saveCard[0].toString() << " has been removed." << endl;
   else
      cout << saveCard[0].toString() << " is not on the list." << endl;

   showList (myList);

   return 0;
}

// beginning of Card method definitions
Card::Card(char value, Suit suit)
{
   set(value, suit);
}

string Card::toString()
{
   string retVal = " ";

   if (errorFlag)
      return "** illegal **";

   retVal[0] = value;

   if (suit == spades)
      retVal += " of Spades";
   else if (suit == hearts)
      retVal += " of Hearts";
   else if (suit == diamonds)
      retVal += " of Diamonds";
   else if (suit == clubs)
      retVal += " of Clubs";

   return retVal;
}

bool Card::set(char value, Suit suit)
{
   char upVal;

   upVal = toupper((int)value);

   if ( !isValid(upVal, suit))
   {
      errorFlag = true;
      return false;
   }

   errorFlag = false;
   this->value = upVal;
   this->suit = suit;
   return true;
}

bool Card::isValid(char value, Suit suit)
{
   string upVal = "_";
   string legalVals = "23456789TJQKA";

   upVal[0] = toupper((int)value);

   if ( legalVals.find(upVal) != string::npos )
      return true;
   else
      return false;
}

bool Card::equals(Card card)
{
   if (this->value != card.value)
      return false;
   if (this->suit != card.suit)
      return false;
   if (this->errorFlag != card.errorFlag)
      return false;
   return true;
}
// end of Card method definitions

// new global scope method -------------------------------------------
Card generateRandomCard()
{
   static char valArray[] = { '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J',
      'Q', 'K', 'A' };
   Card::Suit suit;
   char val;

   suit = (Card::Suit) ( rand() % 4 );
   val = valArray[ rand() % 13 ];

   return Card(val, suit);
}

// Card comparison method definitions -----------------------------------------
int Card::compareTo(Card &other)
{
   if (this->value == other.value)
      return ( getSuitRank(this->suit) - getSuitRank(other.suit) );

   return ( 
      getValueRank(this->value) 
         - getValueRank(other.value) 
      );
}

int Card::getSuitRank(Suit st)
{
   int k;

   for (k = 0; k < 4; k++) 
      if (suitRanks[k] == st)
         return k;

   // should not happen
   return 0;
}

int Card::getValueRank(char val)
{
   int k;

   for (k = 0; k < 13; k++) 
      if (valueRanks[k] == val)
         return k;

   // should not happen
   return 0;
}

void showList(CardList &myList)
{
   list<Card>::iterator iter;

   cout << endl << "_____Here's the List_______" << endl;
   for( iter = myList.begin(); iter != myList.end(); iter++)
   {
      cout << "[" << iter->toString() << "] " << endl;
   }
   cout << endl << "_____That's all!_______" << endl << endl;
}

void insert(CardList &myList, Card &insertedCard)
{
   list<Card>::iterator iter;

   for (iter = myList.begin() ; iter != myList.end() ; iter++ )
      if ( insertedCard.compareTo(*iter) < 0)
         break;
   myList.insert(iter, insertedCard);
}

bool remove(CardList &myList, Card &removedCard)
{
   list<Card>::iterator iter;

   for (iter = myList.begin() ; iter != myList.end() ; iter++ )
   {
      if ( removedCard == *iter )
      {
         myList.erase(iter);
         return true;
      }
   }
   return false;
}

bool removeAll(CardList &myList, Card &x)
{
   list<Card>::iterator iter;

   for (iter = myList.begin() ; iter != myList.end() ; iter++ )
   {
      if ( x == *iter )
      {
         myList.remove(x);
         return true;
      }
   }
   return false;
}

bool operator== (Card firstCard, Card otherCard) 
{
   if ( firstCard.getSuit() != otherCard.getSuit())
      return false;
   if ( firstCard.getVal() != otherCard.getVal())
      return false;
   if ( firstCard.getErrorFlag() != otherCard.getErrorFlag())
      return false;
   return true;
}

/* ----- paste of run -----

Comparison Mechanism and Random Card Generation Test
should all be 0:
0
0
0
should all be < 0 :
-3
-1
-1
should all be > 0 :
1
1
1

Some random cards:
4 of Hearts  3 of Clubs  3 of Spades  6 of Spades  4 of Diamonds  3 of Clubs  Q
of Diamonds  3 of Hearts  3 of Hearts  7 of Hearts  7 of Hearts  5 of Diamonds
5 of Clubs  Q of Spades  J of Hearts  3 of Spades  6 of Hearts  J of Spades  T o
f Spades  J of Clubs  6 of Spades  3 of Diamonds  A of Hearts  3 of Diamonds  T
of Hearts  Q of Hearts  J of Diamonds  5 of Diamonds  J of Hearts  Q of Spades
7 of Spades  A of Diamonds  Q of Spades  6 of Spades  Q of Spades  3 of Diamonds
  A of Spades  2 of Hearts  K of Hearts  9 of Clubs  2 of Diamonds  3 of Diamond
s  8 of Clubs  9 of Diamonds  4 of Hearts  5 of Spades  A of Clubs  T of Clubs
6 of Spades  8 of Hearts

----- Global Method Test -----

_____Here's the List_______
[4 of Diamonds]
[4 of Diamonds]
[5 of Clubs]
[5 of Clubs]
[6 of Diamonds]
[6 of Diamonds]
[6 of Diamonds]
[6 of Diamonds]
[7 of Clubs]
[7 of Clubs]
[T of Diamonds]
[T of Diamonds]
[J of Hearts]
[J of Hearts]
[K of Diamonds]
[K of Diamonds]
[K of Spades]
[K of Spades]
[A of Clubs]
[A of Clubs]

_____That's all!_______

Removing 6 of Diamonds
Removing A of Clubs
Removing 7 of Clubs
Removing 4 of Diamonds

_____Here's the List_______
[5 of Clubs]
[5 of Clubs]
[T of Diamonds]
[T of Diamonds]
[J of Hearts]
[J of Hearts]
[K of Diamonds]
[K of Diamonds]
[K of Spades]
[K of Spades]

_____That's all!_______

6 of Diamonds is not on the list.

Removing all K of Diamonds
K of Diamonds has been removed.

_____Here's the List_______
[5 of Clubs]
[5 of Clubs]
[T of Diamonds]
[T of Diamonds]
[J of Hearts]
[J of Hearts]
[K of Spades]
[K of Spades]

_____That's all!_______

Press any key to continue . . .

---------------------------*/